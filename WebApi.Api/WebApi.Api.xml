<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApi.Api</name>
    </assembly>
    <members>
        <member name="T:WebApi.WebApi.Api.AutoFacModule">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebApi.WebApi.Api.AutoFacModule.Load(Autofac.ContainerBuilder)">
            <summary>
            重写autofac管道load方法
            </summary>
        </member>
        <member name="M:WebApi.WebApi.Api.AutoFacModule.GetAssemblyByName(System.String)">
            <summary>
            根据程序集名称获取程序集
            </summary>
            <param name="AssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:WebApi.Api.ConfigureExtensions.ConfigureExtensions.UseSwaggUIConfigure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            swagger-ui
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:WebApi.Api.ConfigureExtensions.ConfigureExtensions.UseRoutingConfigure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            路由配置
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:WebApi.Api.ConfigureExtensions.ConfigureExtensions.UseSignalConfigure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用实时通讯
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:WebApi.Api.Controllers.TokenController.GetRefreshToken">
            <summary>
            刷新token
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApi.Api.Controllers.TokenController.GetAccessToken">
            <summary>
            获取accessToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApi.Api.Controllers.UserController.UserLogin">
            <summary>
            登陆接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApi.Api.Controllers.UserController.UserRegirst">
            <summary>
            注册接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApi.Api.Controllers.UserController.UserChangePassword">
            <summary>
            修改密码
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApi.Api.Controllers.UserController.UserDelete(System.Int32)">
            <summary>
            删除用户
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApi.Api.Filters.ExceptionFilter">
            <summary>
            IExceptionFilter接口，接口只提供了一个方法OnException，主要的参数为ExceptionContext类，
            基本上就是通过ExceptionContext类来获取相关错误信息，以及进行对应的HTTP请求和响应操作。
            FilterAttribute抽象类,可以作为特性使用的全局操作过滤器
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebApi.Api.Filters.ExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)" -->
        <member name="M:WebApi.Api.MiddlewareExtensions.MiddlewareExtensions.UseLogMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            中间件
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddFreeSqlService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入freesql
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddRedisService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入csredis
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddSwaggUIService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入swaggerui
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddMiniProfilerService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入miniprofile
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddEasyNetQService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入EasyNetQ
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddHttpClientService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入httpclient
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddResponseCachingService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入responserCache
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddCorsService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入跨域
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddDataDbContext(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入dbcontext
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddJwtService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入jwt
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddResponseCompressionService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入响应压缩
            </summary>
        </member>
        <member name="M:WebApi.Api.ServiceExtensions.ServiceCollectionExtenioncs.AddCapEvent(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入cap
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:WebApi.Api.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            添加autofa服务 （注意：3.0写法 ）
            </summary>
            <param name="builder"></param>
        </member>
    </members>
</doc>
